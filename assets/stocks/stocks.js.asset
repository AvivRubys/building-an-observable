function fetchStockData(symbol){
  symbol = symbol.toUpperCase();
  let url = stockUrl(symbol);
  return Observable.fromPromise(() =>
    fetch(url)
    .then(res => res.text())
    .then(txt => ({symbol, price:extractPrice(txt)}))
  );
}
###
function fetchLiveStockData(symbol){
  return Observable
    .interval(5000)
    .startWith({})
    .map(() => fetchStockData(symbol))
    .switch()
    .startWith({symbol})
    .scan((prev,next)=>
      ({...next, diff: calculateDiff(prev,next)})
    )
    .catch(()=>Observable.just({symbol,isError:true}))
};
###
let userStocks = new Subject();

let userStocksState = userStocks
  .startWith("TLV:T25")
  .map(fetchLiveStockData)
  .mergeAll()
  .scan((stocks,update)=>(
  {...stocks, [update.symbol]:update}), {}
  )
  .map(allStocks => Object.values(allStocks));
###

let StockItem = ({symbol, price, isError, diff}) => {
  let color = diff > 0 ? "green" : "red";
  return (<div>
    <span>{symbol}</span>
    <span>:</span>
    <span>{isError ? "ERR" : (price || "loading...")}</span>
    {diff && diff !== 0 ? 
      <span style={{color,margin:"0 10px"}}>{diff}%</span> :
      null}
    </div>);
};

let StocksList = userStocksState
  .map(stockList => 
        stockList.map(stock => (<StockItem {...stock} />)));

let App = StocksList.map(stockList => {
  return (<div>
    {stockList}
    <input type="text" onKeyUp={e => {
      if (e.keyCode === 13){
        userStocks.onNext(e.target.value.toUpperCase());
        e.target.value = "";
        }
    }} />
    </div>);
});
###
let userStocks = new Subject();

function fetchLiveStockData(symbol){
  return Observable
    .interval(5000)
    .startWith({})
    .map(() => fetchStockData(symbol))
    .switch()
    .startWith({symbol})
    .scan((prev,next)=>(
    {...next, diff: calculateDiff(prev,next)}
    ))
    .catch(e => Observable.just({symbol, isError:true}))
};

let userStocksState = userStocks
  .startWith("TLV:T25")
  .map(fetchLiveStockData)
  .mergeAll()
  .scan((stocks,update)=>(
  {...stocks, [update.symbol]:update}), {}
  )
  .map(allStocks => Object.values(allStocks));

let StockItem = ({symbol, price, isError, diff}) => {
  let color = diff > 0 ? "green" : "red";
  return (<div>
    <span>{symbol}</span>
    <span>:</span>
    <span>{isError ? "ERR" : (price || "loading...")}</span>
    {diff && diff !== 0 ? 
      <span style={{color,margin:"0 10px"}}>{diff}%</span> :
      null}
    </div>);
};

let StocksList = userStocksState
  .map(stockList => 
        stockList.map(stock => (<StockItem {...stock} />)));

let App = StocksList.map(stockList => {
  return (<div>
    {stockList}
    <input type="text" onKeyUp={e => {
      if (e.keyCode === 13){
        userStocks.onNext(e.target.value.toUpperCase());
        e.target.value = "";
        }
    }} />
    </div>);
});

let DOMContainer = getAppContainer(context);
App.subscribe(comp => ReactDOM.render(comp, DOMContainer));
