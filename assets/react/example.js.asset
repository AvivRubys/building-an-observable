let DOMContainer = getAppContainer(context)
let RxComponent = Observable
    .interval(1000)
    .map(()=>
        (<div>{new Date().toLocaleString()}</div>))

RxComponent
.subscribe(comp=> ReactDOM.render(comp, DOMContainer))
###
let DOMContainer = getAppContainer(context)
let changes = new Subject()
let values = changes
                    .startWith(0)
                    .scan((acc,next)=>acc + next)
                                        
let RxComponent = values
  .map((value)=>
    (<div>
      <div>{value}</div>
      <button onClick={()=>changes.onNext(1)}>
      +</button>
      <button onClick={()=>changes.onNext(-1)}>
      -</button>
     </div>))

RxComponent
.subscribe(comp=> ReactDOM.render(comp, DOMContainer))
###
let DOMContainer = getAppContainer(context)
let changes = new Subject()
let dispatch = (action)=> changes.onNext(action);
let incrementAction = {type:"INCREMENT"};
let decrementAction = {type:"DECREMENT"};
let values = changes
            .startWith(0)
            .scan((state,action)=>{
                if (action.type === "INCREMENT")
                    return state + 1;
                if (action.type === "DECREMENT")
                    return state - 1;
                return state;
            })
            
let RxComponent = values
  .map((value)=>
    (<div>
      <div>{value}</div>
      <button onClick={()=>dispatch(incrementAction)}>
      +</button>
      <button onClick={()=>dispatch(decrementAction)}>
      -</button>
      <div>redux style</div>
     </div>))

RxComponent
.subscribe(comp=> ReactDOM.render(comp, DOMContainer))
###
class Counter extends Component
{
  constructor(){
    super();
    this.changes = new Subject();
    this.state = {count:0}
  }
  
  componentDidMount(){
    this.changes
    .scan((acc,next)=>acc + next)
    .startWith(0)
    .subscribe(count=>this.setState({count}));
  }
  
  increment(){
    this.changes.onNext(1)
  }
  
  decrement(){
    this.changes.onNext(-1)
  }
  
  render(){
    return (<div>
      <div>{this.state.count}</div>
      <button onClick={()=>this.increment()}>
      +</button>
      <button onClick={()=>this.decrement()}>
      -</button>
      <div>Component</div>
     </div>)
  }
}

let DOMContainer = getAppContainer(context) 
ReactDOM.render(<Counter/>, DOMContainer)

###                                        
let Counter = createComponent( props$ =>
{
  const { handler: increment,
          stream: increment$ } = createEventHandler()
  const { handler: decrement, 
          stream: decrement$ } = createEventHandler()
  const count$ = Observable.merge(
      increment$.map(() => 1),
      decrement$.map(() => -1)
    )
    .startWith(0)
    .scan((count, n) => count + n, 0)

  return count$.map(count =>(
    <div>
      <div>{count}</div>
      <button onClick={increment}>+</button>
      <button onClick={decrement}>-</button>
      <div>Recompose</div>
    </div>
  ))
});

let DOMContainer = getAppContainer(context)
ReactDOM.render(<Counter/>, DOMContainer)
